#version 330 core

struct LightSource {
	vec3 position;
	float intensity;
	vec3 color;
	float type;
	vec3 direction;
};

#define NR_LIGHTS 4

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 vertexPosition_cameraspace;

// Ouput data
out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform mat4 V;
uniform mat4 M;
uniform LightSource lights[NR_LIGHTS];

void main(){

	// Material properties
	vec3 MaterialDiffuseColor = texture( myTextureSampler, UV ).rgb;
	vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);

	for (int i = 0; i < NR_LIGHTS; i++) {

	LightSource light = lights[i];

	vec3 LightPosition_cameraspace = ( V * vec4(light.position,1)).xyz;
	vec3 LightDirection_cameraspace = LightPosition_cameraspace - vertexPosition_cameraspace;

	// Light emission properties
	// You probably want to put them as uniforms
	vec3 LightColor = light.color;
	float LightPower = light.intensity;
	
	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );

	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);
	
	if (light.type == 1) {
	
		// Distance to the light
		float distance = length( light.position - Position_worldspace );

		// Direction of the light (from the fragment to the light)
		vec3 l = normalize( LightDirection_cameraspace );
		// Cosine of the angle between the normal and the light direction, 
		// clamped above 0
		//  - light is at the vertical of the triangle -> 1
		//  - light is perpendicular to the triangle -> 0
		//  - light is behind the triangle -> 0
		float cosTheta = clamp( dot( n,l ), 0,1 );
	
	
		// Direction in which the triangle reflects the light
		vec3 R = reflect(l,n);
		// Cosine of the angle between the Eye vector and the Reflect vector,
		// clamped to 0
		//  - Looking into the reflection -> 1
		//  - Looking elsewhere -> < 1
		float cosAlpha = clamp( dot( E,R ), 0,1 );	

		color += 
			// Ambient : simulates indirect lighting
			MaterialAmbientColor +
			// Diffuse : "color" of the object
			MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) +
			// Specular : reflective highlight, like a mirror
			MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,50) / (distance*distance);		
		}
		else if (light.type == 2)  {

			//Normal_cameraspace = ( V * M * vec4(vertexNormal_modelspace,0)).xyz; // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.
			
			vec3 direction_Cameraspace = ( V * M * vec4(light.direction, 0)).xyz;

			vec3 l =  normalize(-direction_Cameraspace);
			float cosTheta = clamp( dot( n,l ), 0,1 );
			vec3 R = reflect(-l,n);
			float cosAlpha = clamp( dot( E,R ), 0,1 );			

			color += 
				// Ambient : simulates indirect lighting
				MaterialAmbientColor +
				// Diffuse : "color" of the object
				MaterialDiffuseColor * LightColor * LightPower * cosTheta +
				// Specular : reflective highlight, like a mirror
				MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,50);			
		}
		}
}