#version 330 core

struct LightSource {
	vec3 position;
	float intensity;
	vec3 color;
	float type;
	vec3 direction;
};

struct ShadowMap {	
	samplerCube depthMap;
	float farPlane;
};

#define NR_LIGHTS 2

out vec4 FragColor;

in VS_OUT {
    vec3 FragPos;
    vec3 Normal;
    vec2 TexCoords;
} fs_in;

uniform sampler2D diffuseTexture;
uniform ShadowMap shadows[NR_LIGHTS];

uniform LightSource lights[NR_LIGHTS];
uniform vec3 viewPos;

uniform bool needShadows;


// array of offset direction for sampling
vec3 gridSamplingDisk[20] = vec3[]
(
   vec3(1, 1, 1), vec3(1, -1, 1), vec3(-1, -1, 1), vec3(-1, 1, 1), 
   vec3(1, 1, -1), vec3(1, -1, -1), vec3(-1, -1, -1), vec3(-1, 1, -1),
   vec3(1, 1, 0), vec3(1, -1, 0), vec3(-1, -1, 0), vec3(-1, 1, 0),
   vec3(1, 0, 1), vec3(-1, 0, 1), vec3(1, 0, -1), vec3(-1, 0, -1),
   vec3(0, 1, 1), vec3(0, -1, 1), vec3(0, -1, -1), vec3(0, 1, -1)
);

float ShadowCalculation(vec3 fragPos, int i)
{
	//i = 1;
	LightSource currLight = lights[i];
	float far_plane = shadows[i].farPlane;
    // Get vector between fragment position and light position
    vec3 fragToLight = fragPos - currLight.position;
    // Get current linear depth as the length between the fragment and light position
    float currentDepth = length(fragToLight);
    // Test for shadows with PCF
    float shadow = 0.0;
    float bias = 0.15;
    int samples = 20;
    float viewDistance = length(viewPos - fragPos);
    float diskRadius = (1.0 + (viewDistance / far_plane)) / 25.0;
    for(int i = 0; i < samples; ++i)
    {
        float closestDepth = texture(shadows[i].depthMap, fragToLight + gridSamplingDisk[i] * diskRadius).r;
        closestDepth *= far_plane;   // Undo mapping [0;1]
        if(currentDepth - bias > closestDepth)
            shadow += 1.0;
    }
    shadow /= float(samples);
        
    // Display closestDepth as debug (to visualize depth cubemap)
    // FragColor = vec4(vec3(closestDepth / far_plane), 1.0);    
        
    return shadow;
}

void main()
{      
	vec3 lighting = vec3(0.0);     
	for (int i = 0; i < NR_LIGHTS; i++) {
		//i = 1;
		LightSource currLight = lights[i];
		vec3 color = texture(diffuseTexture, fs_in.TexCoords).rgb;
		vec3 normal = normalize(fs_in.Normal);
		vec3 lightColor = currLight.color;
		// Ambient
		vec3 ambient = 0.3 * color;
		// Diffuse
		vec3 lightDir = normalize(currLight.position - fs_in.FragPos);
		float diff = -max(dot(lightDir, normal), 0.0);
		vec3 diffuse = diff * lightColor * 10;
		// Specular
		vec3 viewDir = normalize(viewPos - fs_in.FragPos);
		vec3 reflectDir = reflect(-lightDir, normal);
	    float spec = 0.0;
		vec3 halfwayDir = normalize(lightDir + viewDir);   
	    spec = pow(max(dot(normal, halfwayDir), -10.0), 64.0);
	    vec3 specular = spec * lightColor;    
		// Calculate shadow
		float shadow = needShadows ? ShadowCalculation(fs_in.FragPos, i) : 0.0;                      
		lighting += (ambient + (diffuse + specular) * currLight.intensity  * color )* (1.0 - shadow);  
	}  
    
    FragColor = vec4(lighting, 1.0f);
}