#version 330 core

struct LightSource {
	vec3 position;
	float intensity;
	vec3 color;
	float type;
	vec3 direction;
	vec2 cutOff;
};





#define NR_LIGHTS 4

out vec4 FragColor;

in VS_OUT {
    vec3 FragPos; //Position_worldspace
    vec3 Normal;
    vec2 TexCoords; //UV
} fs_in;

uniform sampler2D diffuseTexture; //myTextureSampler
uniform	sampler2D dirDepthMap; //shadowMap
uniform	samplerCube depthMap;
uniform	float farPlane;

uniform LightSource lights[NR_LIGHTS];
uniform vec3 viewPos;

uniform bool needShadows;

//fog variables
const vec3 fog_colour = vec3 (0.2,0.2,0.2);
const float min_fog = 3.0;
const float max_fog = 60.0;

// array of offset direction for sampling
vec3 gridSamplingDisk[20] = vec3[]
(
   vec3(1, 1, 1), vec3(1, -1, 1), vec3(-1, -1, 1), vec3(-1, 1, 1), 
   vec3(1, 1, -1), vec3(1, -1, -1), vec3(-1, -1, -1), vec3(-1, 1, -1),
   vec3(1, 1, 0), vec3(1, -1, 0), vec3(-1, -1, 0), vec3(-1, 1, 0),
   vec3(1, 0, 1), vec3(-1, 0, 1), vec3(1, 0, -1), vec3(-1, 0, -1),
   vec3(0, 1, 1), vec3(0, -1, 1), vec3(0, -1, -1), vec3(0, 1, -1)
);

float ShadowCalculation(vec3 fragPos, int i)
{
	//i = 1;
	LightSource currLight = lights[i];
	float far_plane = farPlane;
    // Get vector between fragment position and light position
    vec3 fragToLight = fragPos - currLight.position;
    // Get current linear depth as the length between the fragment and light position
    float currentDepth = length(fragToLight);
    // Test for shadows with PCF
    float shadow = 0.0;
    float bias = 0.15;
    int samples = 20;
    float viewDistance = length(viewPos - fragPos);
    float diskRadius = (1.0 + (viewDistance / far_plane)) / 25.0;
    for(int i = 0; i < samples; ++i)
    {
        float closestDepth = texture(depthMap, fragToLight + gridSamplingDisk[i] * diskRadius).r;
        closestDepth *= far_plane;   // Undo mapping [0;1]
        if(currentDepth - bias > closestDepth)
            shadow += 1.0;
    }
    shadow /= float(samples);
        
    // Display closestDepth as debug (to visualize depth cubemap)
    // FragColor = vec4(vec3(closestDepth / far_plane), 1.0);    
        
    return shadow;
}

void main()
{   // Material properties
	vec3 MaterialDiffuseColor = texture( diffuseTexture, fs_in.TexCoords).rgb;
	vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);

	vec3 lighting = vec3(0.0);  
	vec3 n = normalize(fs_in.Normal);

	
	vec3 E = normalize(viewPos - fs_in.FragPos);
	   
	for (int i = 0; i < NR_LIGHTS; i++) {
		//i = 1;
		LightSource light = lights[i];

		vec3 LightColor = light.color;
		float LightPower = light.intensity;

		if (light.type == 1) {  
			float shadow = needShadows ? ShadowCalculation(fs_in.FragPos, i) : 0.0;   
			// Distance to the light
			float distance = length( light.position - fs_in.FragPos);

			// Direction of the light (from the fragment to the light)
			vec3 l = normalize( light.position -  fs_in.FragPos);
			float cosTheta = clamp(dot( n,l ), 0,1 );
	
	
			// Direction in which the triangle reflects the light
			vec3 R = reflect(-l,n);
			float cosAlpha =clamp( max(dot(E, R), 0.0), 0, 1)	;

			lighting += 
				// Ambient : simulates indirect lighting
				(MaterialAmbientColor * LightPower +
				// Diffuse : "color" of the object
				MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) +
				// Specular : reflective highlight, like a mirror
				MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,100) / (distance*distance))
				* (1.0 - shadow);
		}
		else if (light.type == 3) {
			float shadow = needShadows ? ShadowCalculation(fs_in.FragPos, i-1) : 0.0;             
			vec3 l = normalize( light.position -  fs_in.FragPos );
			float cosTheta = clamp( dot( n,l ), 0,1 ); //diff
			vec3 R = reflect(-l,n);
			float cosAlpha = clamp( dot( E,R ), 0,1 );			
			float distance = length( light.position - fs_in.FragPos );
			
			vec2 cutOff = light.cutOff;
			float theta = dot(l, normalize(-light.direction)); 
			float epsilon = cutOff.y - cutOff.x;
			float spotIntensity = clamp((theta - cutOff.x) / epsilon, 0.0, 1.0);

			lighting +=
				// Ambient : simulates indirect lighting
				MaterialAmbientColor * spotIntensity * LightPower+
				// Diffuse : "color" of the object
				MaterialDiffuseColor * spotIntensity * LightColor * LightPower * cosTheta / (distance*distance) +
				// Specular : reflective highlight, like a mirror
				MaterialSpecularColor * spotIntensity * LightColor * LightPower * pow(cosAlpha,10) / (distance*distance) * (1.0 - shadow);			

		}
	} 
	 
    
    FragColor = vec4(lighting, 1.0f);
}