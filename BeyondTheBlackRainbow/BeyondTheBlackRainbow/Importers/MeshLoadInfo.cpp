#include "MeshLoadInfo.h"
const MeshLoadInfo::ShaderLoadInfo* MeshLoadInfo::LIGHTING_SHADER = new ShaderLoadInfo(std::string("vertexShaderPath"), std::string("fragmentShaderPath"));
const MeshLoadInfo::ShaderLoadInfo* MeshLoadInfo::TEXTURE_SHADER = new ShaderLoadInfo(std::string("../BeyondTheBlackRainbow/Shader/Vertex/texture_vertex_shader.glsl"), std::string("../BeyondTheBlackRainbow/Shader/Fragment/texture_fragment_shader.glsl"));
const MeshLoadInfo::ShaderLoadInfo* MeshLoadInfo::SIMPLE_LIGHTING_SHADER = new ShaderLoadInfo(std::string("../BeyondTheBlackRainbow/Shader/Vertex/SimpleVertexShader.vertexshader"), std::string("../BeyondTheBlackRainbow/Shader/Fragment/SimpleFragmentShader.fragmentshader"));
const MeshLoadInfo::ShaderLoadInfo* MeshLoadInfo::TEXT_SHADER = new ShaderLoadInfo(std::string("../BeyondTheBlackRainbow/Shader/Vertex/TextVertexShader.vertexshader"), std::string("../BeyondTheBlackRainbow/Shader/Fragment/TextFragmentShader.fragmentshader"));
const MeshLoadInfo::ShaderLoadInfo* MeshLoadInfo::DEPTH_SHADER = new ShaderLoadInfo(std::string("../BeyondTheBlackRainbow/Shader/Vertex/DepthVertexShader.vertexshader"), std::string("../BeyondTheBlackRainbow/Shader/Geometry/DepthGeometryShader.geometryshader"), std::string("../BeyondTheBlackRainbow/Shader/Fragment/DepthFragmentShader.fragmentshader"));
const MeshLoadInfo::ShaderLoadInfo* MeshLoadInfo::DEPTHDIR_SHADER = new ShaderLoadInfo(std::string("../BeyondTheBlackRainbow/Shader/Vertex/DepthDirVertexShader.vertexshader"), std::string("../BeyondTheBlackRainbow/Shader/Fragment/DepthDirFragmentShader.fragmentshader"));
const MeshLoadInfo::ShaderLoadInfo* MeshLoadInfo::SHADOWMAP_SHADER = new ShaderLoadInfo(std::string("../BeyondTheBlackRainbow/Shader/Vertex/ShadowMappingVertexShader.vertexshader"), std::string("../BeyondTheBlackRainbow/Shader/Fragment/ShadowMappingFragmentShader.fragmentshader"));
const MeshLoadInfo::ShaderLoadInfo* MeshLoadInfo::DIR_SHADOWMAP_SHADER = new ShaderLoadInfo(std::string("../BeyondTheBlackRainbow/Shader/Vertex/DirShadowMappingVertexShader.vertexshader"), std::string("../BeyondTheBlackRainbow/Shader/Fragment/DirShadowMappingFragmentShader.fragmentshader"));
const MeshLoadInfo::ShaderLoadInfo* MeshLoadInfo::BLOOM_SHADER = new ShaderLoadInfo(std::string("../BeyondTheBlackRainbow/Shader/Vertex/BloomVertexShader.glsl"), std::string("../BeyondTheBlackRainbow/Shader/Fragment/BloomFragmentShader.glsl"));
const MeshLoadInfo::ShaderLoadInfo* MeshLoadInfo::RENDER_SURFACE = new ShaderLoadInfo(std::string("../BeyondTheBlackRainbow/Shader/Vertex/RenderSurfaceVertexShader.glsl"), std::string("../BeyondTheBlackRainbow/Shader/Fragment/RenderSurfaceFragmentShader.glsl"));
const MeshLoadInfo::ShaderLoadInfo* MeshLoadInfo::HIGH_PASS = new ShaderLoadInfo(std::string("../BeyondTheBlackRainbow/Shader/Vertex/HighPassVertexShader.glsl"), std::string("../BeyondTheBlackRainbow/Shader/Fragment/HighPassFragmentShader.glsl"));
const MeshLoadInfo::ShaderLoadInfo* MeshLoadInfo::BLUR_SHADER = new ShaderLoadInfo(std::string("../BeyondTheBlackRainbow/Shader/Vertex/BlurVertexShader.glsl"), std::string("../BeyondTheBlackRainbow/Shader/Fragment/BlurFragmentShader.glsl"));
const MeshLoadInfo::ShaderLoadInfo* MeshLoadInfo::DOF_SHADER = new ShaderLoadInfo(std::string("../BeyondTheBlackRainbow/Shader/Vertex/DepthOfFieldVertexShader.glsl"), std::string("../BeyondTheBlackRainbow/Shader/Fragment/DepthOfFieldFragmentShader.glsl"));


const MeshLoadInfo::LoadInfo* MeshLoadInfo::TABLE = new LoadInfo(std::string("../BeyondTheBlackRainbow/Assets/Models/Table.obj"), std::string("../BeyondTheBlackRainbow/Assets/Models/duck_textures/wood _texture.jpg"), SHADOWMAP_SHADER, MeshLoadInfo::CollisionType::DYNAMIC, MeshLoadInfo::CollisionShapeType::CONVEX);
const MeshLoadInfo::LoadInfo* MeshLoadInfo::TABLE2 = new LoadInfo(std::string("../BeyondTheBlackRainbow/Assets/Models/maya/table.obj"), std::string("../BeyondTheBlackRainbow/Assets/Models/duck_textures/maya/table.jpg"), SHADOWMAP_SHADER, MeshLoadInfo::CollisionType::DYNAMIC, MeshLoadInfo::CollisionShapeType::CONVEX);
const MeshLoadInfo::LoadInfo* MeshLoadInfo::ANOTHER_BOX_MESH = new LoadInfo(std::string("../BeyondTheBlackRainbow/Assets/Models/maya/box.obj"), std::string("../BeyondTheBlackRainbow/Assets/Models/duck_textures/wood _texture.jpg"), SHADOWMAP_SHADER, MeshLoadInfo::CollisionType::DYNAMIC, MeshLoadInfo::CollisionShapeType::CONVEX);
const MeshLoadInfo::LoadInfo* MeshLoadInfo::ANOTHER_BOX_MESH_GREEN = new LoadInfo(std::string("../BeyondTheBlackRainbow/Assets/Models/maya/box.obj"), std::string("../BeyondTheBlackRainbow/Assets/Models/duck_textures/wood _texture_green.jpg"), SHADOWMAP_SHADER, MeshLoadInfo::CollisionType::DYNAMIC, MeshLoadInfo::CollisionShapeType::CONVEX);
const MeshLoadInfo::LoadInfo* MeshLoadInfo::SILLA = new LoadInfo(std::string("../BeyondTheBlackRainbow/Assets/Models/maya/silla.obj"), std::string("../BeyondTheBlackRainbow/Assets/Models/duck_textures/maya/silla.jpg"), SHADOWMAP_SHADER, MeshLoadInfo::CollisionType::DYNAMIC, MeshLoadInfo::CollisionShapeType::CONVEX);
const MeshLoadInfo::LoadInfo* MeshLoadInfo::ROOM = new LoadInfo(std::string("../BeyondTheBlackRainbow/Assets/Models/finalRoom2.obj"), std::string("../BeyondTheBlackRainbow/Assets/Models/duck_textures/room.png"), SHADOWMAP_SHADER, MeshLoadInfo::CollisionType::STATIC, MeshLoadInfo::CollisionShapeType::TRIANGLE);
const MeshLoadInfo::LoadInfo* MeshLoadInfo::BOX_MESH = new LoadInfo(std::string("../BeyondTheBlackRainbow/Assets/Models/maya/box.dae"), std::string("../BeyondTheBlackRainbow/Assets/Models/duck_textures/maya/box2.tga"), SHADOWMAP_SHADER, MeshLoadInfo::CollisionType::DYNAMIC, MeshLoadInfo::CollisionShapeType::CONVEX);
const MeshLoadInfo::LoadInfo* MeshLoadInfo::BED = new LoadInfo(std::string("../BeyondTheBlackRainbow/Assets/Models/Bed.obj"), std::string("../BeyondTheBlackRainbow/Assets/Models/duck_textures/whiteBed.jpg"), SHADOWMAP_SHADER, MeshLoadInfo::CollisionType::DYNAMIC, MeshLoadInfo::CollisionShapeType::CONVEX);
const MeshLoadInfo::LoadInfo* MeshLoadInfo::DOOR = new LoadInfo(std::string("../BeyondTheBlackRainbow/Assets/Models/Door.obj"), std::string("../BeyondTheBlackRainbow/Assets/Models/duck_textures/door.png"), SHADOWMAP_SHADER, MeshLoadInfo::CollisionType::STATIC, MeshLoadInfo::CollisionShapeType::CONVEX);
const MeshLoadInfo::LoadInfo* MeshLoadInfo::DOOR2 = new LoadInfo(std::string("../BeyondTheBlackRainbow/Assets/Models/Door2.obj"), std::string("../BeyondTheBlackRainbow/Assets/Models/duck_textures/door.png"), SHADOWMAP_SHADER, MeshLoadInfo::CollisionType::STATIC, MeshLoadInfo::CollisionShapeType::CONVEX);
const MeshLoadInfo::LoadInfo* MeshLoadInfo::DOOR3 = new LoadInfo(std::string("../BeyondTheBlackRainbow/Assets/Models/Door3.obj"), std::string("../BeyondTheBlackRainbow/Assets/Models/duck_textures/door.png"), SHADOWMAP_SHADER, MeshLoadInfo::CollisionType::STATIC, MeshLoadInfo::CollisionShapeType::CONVEX);
const MeshLoadInfo::LoadInfo* MeshLoadInfo::DOOR4 = new LoadInfo(std::string("../BeyondTheBlackRainbow/Assets/Models/Door4.obj"), std::string("../BeyondTheBlackRainbow/Assets/Models/duck_textures/door.png"), SHADOWMAP_SHADER, MeshLoadInfo::CollisionType::STATIC, MeshLoadInfo::CollisionShapeType::CONVEX);
const MeshLoadInfo::LoadInfo* MeshLoadInfo::DUCK = new LoadInfo(std::string("../BeyondTheBlackRainbow/Assets/Models/duck.dae"), std::string("../BeyondTheBlackRainbow/Assets/Models/duck_textures/duck.png"), SHADOWMAP_SHADER, MeshLoadInfo::CollisionType::DYNAMIC, MeshLoadInfo::CollisionShapeType::SPHERE);
const MeshLoadInfo::LoadInfo* MeshLoadInfo::LIGHT = new LoadInfo(std::string("../BeyondTheBlackRainbow/Assets/Models/maya/light.obj"), std::string("../BeyondTheBlackRainbow/Assets/Models/duck_textures/duck.png"), SHADOWMAP_SHADER, MeshLoadInfo::CollisionType::STATIC, MeshLoadInfo::CollisionShapeType::CONVEX);
const MeshLoadInfo::LoadInfo* MeshLoadInfo::LIGHT2 = new LoadInfo(std::string("../BeyondTheBlackRainbow/Assets/Models/maya/light2.obj"), std::string("../BeyondTheBlackRainbow/Assets/Models/duck_textures/duck.png"), SHADOWMAP_SHADER, MeshLoadInfo::CollisionType::STATIC, MeshLoadInfo::CollisionShapeType::CONVEX);
const MeshLoadInfo::LoadInfo* MeshLoadInfo::LIGHT3 = new LoadInfo(std::string("../BeyondTheBlackRainbow/Assets/Models/maya/light3.obj"), std::string("../BeyondTheBlackRainbow/Assets/Models/duck_textures/duck.png"), SHADOWMAP_SHADER, MeshLoadInfo::CollisionType::STATIC, MeshLoadInfo::CollisionShapeType::CONVEX);
const MeshLoadInfo::LoadInfo* MeshLoadInfo::LIGHT4 = new LoadInfo(std::string("../BeyondTheBlackRainbow/Assets/Models/maya/light4.obj"), std::string("../BeyondTheBlackRainbow/Assets/Models/duck_textures/duck.png"), SHADOWMAP_SHADER, MeshLoadInfo::CollisionType::STATIC, MeshLoadInfo::CollisionShapeType::CONVEX);
const MeshLoadInfo::LoadInfo* MeshLoadInfo::KEY = new LoadInfo(std::string("../BeyondTheBlackRainbow/Assets/Models/maya/key.obj"), std::string("../BeyondTheBlackRainbow/Assets/Models/duck_textures/maya/key.jpg"), SHADOWMAP_SHADER, MeshLoadInfo::CollisionType::DYNAMIC, MeshLoadInfo::CollisionShapeType::CONVEX);
const MeshLoadInfo::LoadInfo* MeshLoadInfo::VASE = new LoadInfo(std::string("../BeyondTheBlackRainbow/Assets/Models/maya/vase.obj"), std::string("../BeyondTheBlackRainbow/Assets/Models/duck_textures/maya/vase.JPG"), SHADOWMAP_SHADER, MeshLoadInfo::CollisionType::DYNAMIC, MeshLoadInfo::CollisionShapeType::CONVEX);
const MeshLoadInfo::LoadInfo* MeshLoadInfo::JAR = new LoadInfo(std::string("../BeyondTheBlackRainbow/Assets/Models/maya/jar.obj"), std::string("../BeyondTheBlackRainbow/Assets/Models/duck_textures/maya/jar.jpg"), SHADOWMAP_SHADER, MeshLoadInfo::CollisionType::DYNAMIC, MeshLoadInfo::CollisionShapeType::CONVEX);
const MeshLoadInfo::LoadInfo* MeshLoadInfo::TREE = new LoadInfo(std::string("../BeyondTheBlackRainbow/Assets/Models/maya/tree.obj"), std::string("../BeyondTheBlackRainbow/Assets/Models/duck_textures/maya/tree.jpg"), SHADOWMAP_SHADER, MeshLoadInfo::CollisionType::DYNAMIC, MeshLoadInfo::CollisionShapeType::CONVEX);
const MeshLoadInfo::LoadInfo* MeshLoadInfo::TEXT = new LoadInfo(std::string(""), std::string("../BeyondTheBlackRainbow/Assets/Models/duck_textures/Holstein.DDS"), TEXT_SHADER, MeshLoadInfo::CollisionType::DYNAMIC, MeshLoadInfo::CollisionShapeType::SPHERE); 
const MeshLoadInfo::LoadInfo* MeshLoadInfo::DEPTH = new LoadInfo(std::string(""), std::string(), DEPTH_SHADER, MeshLoadInfo::CollisionType::DYNAMIC, MeshLoadInfo::CollisionShapeType::SPHERE);
const MeshLoadInfo::LoadInfo* MeshLoadInfo::DEPTHDIR = new LoadInfo(std::string(""), std::string(), DEPTHDIR_SHADER, MeshLoadInfo::CollisionType::DYNAMIC, MeshLoadInfo::CollisionShapeType::SPHERE);
